name: CI

on:
  push: { branches: ["main"] }
  pull_request: { branches: ["main"] }

jobs:
  unit:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        service: [auth, product, order, api-gateway]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: npm
          cache-dependency-path: |
            package-lock.json
            auth/package-lock.json
            product/package-lock.json
            order/package-lock.json
            api-gateway/package-lock.json
      - name: Install deps
        working-directory: ${{ matrix.service }}
        run: npm ci
      - name: Run unit tests
        working-directory: ${{ matrix.service }}
        run: |
          if npm run | grep -q "test:unit"; then npm run test:unit; else npm test; fi

  integration:
    needs: unit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: npm
      - name: Install root deps (E2E runner)
        run: npm ci

      - name: Docker Compose up
        run: docker compose up -d --build

      - name: Wait for Gateway
        run: |
          for i in {1..90}; do
            code=$(curl -sS -o /dev/null -w "%{http_code}" http://127.0.0.1:3003/health || true)
            [[ "$code" == "200" || "$code" == "204" ]] && exit 0
            echo "waiting gateway ($i/90)"; sleep 2
          done
          echo "gateway not ready"; docker compose ps; docker compose logs --no-color api-gateway; exit 1

      - name: Run E2E tests (via Gateway)
        env:
          GATEWAY_URL: http://127.0.0.1:3003
          BASE_URL: http://127.0.0.1:3003
          JWT_SECRET: ${{ secrets.JWT_SECRET || 'mysecretkey' }}
          MONGODB_AUTH_URI: mongodb://127.0.0.1:27017/auth_db_test
          MONGODB_PRODUCT_URI: mongodb://127.0.0.1:27017/product_db_test
          RABBITMQ_URL: amqp://127.0.0.1:5672
        run: npm test

      - name: Collect logs (always)
        if: always()
        run: |
          mkdir -p logs
          docker compose logs --no-color > logs/stack.log || true
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: integration-logs
          path: logs/**
      - name: Down
        if: always()
        run: docker compose down -v
