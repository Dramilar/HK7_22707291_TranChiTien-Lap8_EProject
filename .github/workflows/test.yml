name: CI & Release

on:
  push:
    branches: [ "main" ]
    tags:
      - "v*"
  pull_request:
    branches: [ "main" ]

permissions:
  contents: write

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  ci:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: |
            package-lock.json
            api-gateway/package-lock.json
            auth/package-lock.json
            product/package-lock.json
            order/package-lock.json

      - name: Install root deps (for mocha/tests on host)
        run: npm ci

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 🔧 Override chỉ dùng trong CI: chuyển depends_on sang service_started để tránh kẹt healthcheck trong container
      - name: Write docker-compose CI override
        run: |
          cat > docker-compose.ci.override.yml <<'YAML'
          services:
            api-gateway:
              depends_on:
                auth:
                  condition: service_started
                product:
                  condition: service_started
                order:
                  condition: service_started
          YAML
          echo "===> CI override created"

      - name: Compose build
        run: docker compose -f docker-compose.yml -f docker-compose.ci.override.yml build

      - name: Compose up (detached)
        run: docker compose -f docker-compose.yml -f docker-compose.ci.override.yml up -d

      # ⏱️ Chờ API Gateway hoạt động (chỉ cần reachable, không bắt buộc 200)
      - name: Wait for API Gateway (3003)
        run: |
          ok=""
          for i in {1..90}; do
            # /health trả 200/204 -> pass
            code=$(curl -sS -o /dev/null -w "%{http_code}" http://localhost:3003/health || true)
            if [[ "$code" == "200" || "$code" == "204" ]]; then
              echo "Gateway /health $code"; ok="yes"; break
            fi
            # Root trả bất kỳ mã HTTP -> coi như cổng hoạt động
            if curl -sS -o /dev/null http://localhost:3003; then
              echo "Gateway reachable (root responded)"; ok="yes"; break
            fi
            echo "Waiting gateway... ($i/90)"; sleep 2
          done

          if [ -z "$ok" ]; then
            echo "Gateway not ready in time"
            echo "==== docker compose ps ===="
            docker compose -f docker-compose.yml -f docker-compose.ci.override.yml ps
            echo "---- api-gateway logs ----"
            docker compose -f docker-compose.yml -f docker-compose.ci.override.yml logs --no-color api-gateway || true
            echo "---- auth logs ----"
            docker compose -f docker-compose.yml -f docker-compose.ci.override.yml logs --no-color auth || true
            echo "---- product logs ----"
            docker compose -f docker-compose.yml -f docker-compose.ci.override.yml logs --no-color product || true
            echo "---- order logs ----"
            docker compose -f docker-compose.yml -f docker-compose.ci.override.yml logs --no-color order || true
            exit 1
          fi

      # (Giữ nguyên cách test hiện tại của bạn: mocha ở root)
      - name: Run tests (root mocha via gateway)
        env:
          BASE_URL: "http://localhost:3003"
          GATEWAY_URL: "http://localhost:3003"
          JWT_SECRET: ${{ secrets.JWT_SECRET || 'mysecretkey' }}
        run: npm test

      - name: Dump compose status
        if: always()
        run: docker compose -f docker-compose.yml -f docker-compose.ci.override.yml ps

      - name: Collect service logs
        if: always()
        run: |
          mkdir -p logs
          docker compose -f docker-compose.yml -f docker-compose.ci.override.yml logs --no-color mongo > logs/mongo.log || true
          docker compose -f docker-compose.yml -f docker-compose.ci.override.yml logs --no-color rabbitmq > logs/rabbitmq.log || true
          docker compose -f docker-compose.yml -f docker-compose.ci.override.yml logs --no-color auth > logs/auth.log || true
          docker compose -f docker-compose.yml -f docker-compose.ci.override.yml logs --no-color product > logs/product.log || true
          docker compose -f docker-compose.yml -f docker-compose.ci.override.yml logs --no-color order > logs/order.log || true
          docker compose -f docker-compose.yml -f docker-compose.ci.override.yml logs --no-color api-gateway > logs/gateway.log || true

      - name: Upload logs/artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: compose-and-test-logs
          path: |
            logs/**
            **/coverage/**
          if-no-files-found: ignore

      - name: Compose down
        if: always()
        run: docker compose -f docker-compose.yml -f docker-compose.ci.override.yml down -v

  release:
    if: startsWith(github.ref, 'refs/tags/')
    needs: [ci]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build release artifact (zip source)
        run: |
          mkdir -p dist
          zip -r "dist/nodejs-microservices-${{ github.ref_name }}.zip" \
            api-gateway auth product order \
            docker-compose.yml \
            package.json package-lock.json README.md \
            -x "**/node_modules/**" "**/.env" "**/dist/**" "**/.git/**"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: dist/nodejs-microservices-${{ github.ref_name }}.zip
          draft: false
          prerelease: false
