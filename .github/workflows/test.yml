name: CI

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  # 🧩 Job 1: Unit test cho từng service (auth, product, order, api-gateway)
  unit:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        service: [auth, product, order, api-gateway]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: npm
          cache-dependency-path: |
            package-lock.json
            auth/package-lock.json
            product/package-lock.json
            order/package-lock.json
            api-gateway/package-lock.json

      - name: Install dependencies
        working-directory: ${{ matrix.service }}
        run: npm ci

      # 🔍 Tự phát hiện test script hoặc test file, chỉ chạy khi có
      - name: Run unit tests (auto-detect)
        working-directory: ${{ matrix.service }}
        shell: bash
        run: |
          set -e

          has_test_unit=$(node -e "const p=require('./package.json');process.stdout.write(p.scripts&&p.scripts['test:unit']?'1':'0')")
          test_script=$(node -e "const p=require('./package.json');process.stdout.write((p.scripts&&p.scripts.test)||'')")

          if [ "$has_test_unit" = "1" ]; then
            echo "✅ Found test:unit script. Running npm run test:unit..."
            npm run test:unit
            exit $?
          fi

          if [ -n "$test_script" ] && ! echo "$test_script" | grep -q "no test specified"; then
            echo "✅ Found valid test script. Running npm test..."
            npm test
            exit $?
          fi

          test_files=$(ls -1 **/*.test.js 2>/dev/null | wc -l || true)
          if [ "$test_files" -gt 0 ]; then
            echo "✅ Found $test_files test file(s). Running Mocha via npx..."
            if npx --yes mocha --version >/dev/null 2>&1; then
              npx mocha --timeout 10000 --recursive --exit
            else
              echo "⚠️ Mocha not installed in this service. Skipping tests."
              exit 0
            fi
          else
            echo "ℹ️ No tests detected in $PWD. Skipping..."
            exit 0
          fi

  # 🧩 Job 2: Integration test qua Docker & API Gateway
  integration:
    needs: unit
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: npm

      - name: Install root deps (for E2E runner)
        run: npm ci

      - name: Docker Compose up (build + start)
        run: docker compose up -d --build

      - name: Wait for API Gateway (3003)
        shell: bash
        run: |
          for i in {1..90}; do
            code=$(curl -sS -o /dev/null -w "%{http_code}" http://127.0.0.1:3003/health || true)
            [[ "$code" == "200" || "$code" == "204" ]] && { echo "✅ Gateway ready"; exit 0; }
            echo "⏳ Waiting Gateway... ($i/90)"; sleep 2
          done
          echo "❌ Gateway not ready in time"; docker compose ps; docker compose logs --no-color api-gateway; exit 1

      - name: Run integration (E2E) tests via Gateway
        env:
          BASE_URL: "http://127.0.0.1:3003"
          GATEWAY_URL: "http://127.0.0.1:3003"
          JWT_SECRET: ${{ secrets.JWT_SECRET || 'mysecretkey' }}
          MONGODB_AUTH_URI: "mongodb://127.0.0.1:27017/auth_db_test"
          MONGODB_PRODUCT_URI: "mongodb://127.0.0.1:27017/product_db_test"
          RABBITMQ_URL: "amqp://127.0.0.1:5672"
        shell: bash
        run: |
          echo "🚀 Running E2E tests through Gateway..."
          npm test

      - name: Collect logs (always)
        if: always()
        run: |
          mkdir -p logs
          docker compose logs --no-color > logs/stack.log || true

      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: integration-logs
          path: logs/**

      - name: Docker Compose down
        if: always()
        run: docker compose down -v
