name: CD - Docker Build & Deploy

on:
  push:
    tags:
      - "v*.*.*"     # build khi tag version (v√≠ d·ª• v1.2.3)
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: ${{ github.repository }}   # ghcr.io/<owner>/<repo>
  SERVICES: "auth product order api-gateway"

jobs:
  build-and-push:
    name: Build & Push images
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write   # c·∫ßn cho GHCR
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build & push per service
        shell: bash
        run: |
          set -e
          VERSION="${GITHUB_REF_NAME:-latest}"
          for SVC in $SERVICES; do
            CONTEXT="$SVC"
            IMAGE="${REGISTRY}/${IMAGE_PREFIX}/${SVC}"
            echo "üõ† Building ${IMAGE}:${VERSION}"
            docker buildx build \
              --platform linux/amd64 \
              --file "${CONTEXT}/Dockerfile" \
              --tag  "${IMAGE}:${VERSION}" \
              --tag  "${IMAGE}:latest" \
              --push \
              "${CONTEXT}"
          done

  deploy:
    name: Deploy via SSH (docker compose)
    needs: build-and-push
    if: ${{ github.ref_type == 'tag' || github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest
    steps:
      - name: SSH deploy
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          script_stop: true
          script: |
            set -e
            cd ${{ secrets.DEPLOY_PATH }}   # th∆∞ m·ª•c tr√™n server ch·ª©a docker-compose.yml

            # Xu·∫•t bi·∫øn m√¥i tr∆∞·ªùng cho compose n·∫øu c·∫ßn (v√≠ d·ª• JWT_SECRET, MONGO URIs)
            # echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" > .env

            # K√©o image m·ªõi & restart d·ªãch v·ª•
            docker compose pull
            docker compose up -d

            # Ki·ªÉm tra nhanh health c·ªßa gateway (n·∫øu service ƒë√£ c√≥ healthcheck HTTP)
            # ch·ªù t·ªëi ƒëa ~90s ƒë·ªÉ c√°c service healthy
            for i in {1..30}; do
              if curl -fsS http://localhost:3003 >/dev/null 2>&1; then
                echo "‚úÖ Gateway is up."
                break
              else
                echo "‚è≥ Waiting gateway... ($i/30)"
                sleep 3
              fi
            done

            docker image prune -f
